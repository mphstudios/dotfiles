#
# PERSONAL SHELL INITIALIZATION FILE ~/.bash_profile for GNU bash (version 4+)
#
# On Unix machines this file is executed for login shells each time you login.
#
# When bash is invoked as an interactive login shell, or as a non-interactive
# shell with the --login option, it first reads and executes commands from the
# file/etc/profile, then looks for ~/.bash_profile, ~/.bash_login, ~/.profile,
# executing the first of these files that exists and is readable.
#
# Non-login interactive bash shells (subshells) will only read ~/.bashrc unless
# the --login option is specified.
#
# macOS Terminal.app executes ~/.bash_profile with each new Terminal window.
#

# Load shell agnostic configurations
[[ -f $HOME/.profile ]] && source "$HOME/.profile"
[[ -f $HOME/.aliases ]] && source "$HOME/.aliases"

# Load configuration for interactive non-login shells
[[ -f $HOME/.bashrc ]] && source "$HOME/.bashrc"

# Load custom command prompt
[[ -f $HOME/.bash_prompt ]] && source "$HOME/.bash_prompt"

# Load private configuration
[[ -f $HOME/.private ]] && source "$HOME/.private"

# Readline configuration
export INPUTRC="$HOME/.inputrc"

## Complete SSH hostnames based on ~/.ssh/config (wildcards ignored)
if [ -r "$HOME/.ssh/config" ]; then
   complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2 | tr ' ' '\n')" scp sftp ssh
fi

# Enable Python version management shims
# and auto-(de)activation of virtualenvs
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

# Enable Ruby version management shims
if command -v rbenv 1>/dev/null 2>&1; then
    eval "$(rbenv init -)"
fi

# Load/unload environment variables based on $PWD
if command -v direnv 1>/dev/null 2>&1; then
    eval "$(direnv hook bash)"
fi

# `fuck` corrects errors in previous console commands
if command -v thefuck 1>/dev/null 2>&1; then
    eval "$(thefuck --alias)"
fi
